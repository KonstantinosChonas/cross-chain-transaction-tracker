name: Integration and E2E Tests

on:
  workflow_dispatch:
    inputs:
      suite:
        description: "Which tests to run"
        required: false
        default: "all"
        type: choice
        options: [all, integration, e2e, ethereum, solana, chaos]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache-dependency-path: go/go.sum

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "tests/integration/requirements.txt"

      - name: Install Python dependencies
        working-directory: ./tests/integration
        run: |
          pip install -r requirements.txt

      - name: Start test infrastructure
        run: docker compose -f infra/test-docker-compose.yml up -d --wait

      - name: Show container status
        run: docker compose -f infra/test-docker-compose.yml ps -a

      - name: Verify services are ready
        run: |
          echo "Verifying Ethereum node..."
          curl -sf http://localhost:8545 -X POST -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' || exit 1
          echo "Verifying Solana node..."
          curl -sf http://localhost:8899 -X POST -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","id":1,"method":"getHealth"}' || exit 1
          echo "All services ready!"

      - name: Build Rust service
        working-directory: ./rust
        run: cargo build --release

      - name: Build Go API
        working-directory: ./go
        run: go build -o bin/api ./cmd/api

      - name: Run integration tests
        working-directory: ./tests/integration
        run: pytest -v --tb=short --log-cli-level=INFO

      - name: Collect container logs
        if: failure()
        run: |
          docker compose -f infra/test-docker-compose.yml logs > container-logs.txt

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-artifacts
          path: |
            container-logs.txt
            tests/integration/*.log
          retention-days: 7

      - name: Stop test infrastructure
        if: always()
        run: docker compose -f infra/test-docker-compose.yml down -v

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        test-suite:
          - ethereum
          - solana
          - chaos
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache-dependency-path: go/go.sum

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "tests/e2e/requirements.txt"

      - name: Install Python dependencies
        working-directory: ./tests/e2e
        run: |
          pip install -r requirements.txt

      - name: Start test infrastructure
        run: docker compose -f infra/test-docker-compose.yml up -d --wait

      - name: Show infra container status
        run: docker compose -f infra/test-docker-compose.yml ps -a

      - name: Verify infrastructure is ready
        run: |
          echo "Verifying Ethereum node..."
          curl -sf http://localhost:8545 -X POST -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' || exit 1
          echo "Verifying Solana node..."
          curl -sf http://localhost:8899 -X POST -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","id":1,"method":"getHealth"}' || exit 1
          echo "Infrastructure ready!"

      - name: Build and start application services
        run: |
          docker compose -f infra/docker-compose.yml build
          docker compose -f infra/docker-compose.yml up -d --wait

      - name: Show app container status
        run: docker compose -f infra/docker-compose.yml ps -a

      - name: Verify application services
        run: |
          echo "Verifying Rust tracker..."
          curl -sf http://localhost:8080/health || exit 1
          echo "Verifying Go API..."
          curl -sf http://localhost:3000/health || exit 1
          echo "All application services ready!"

      - name: Run E2E tests - ${{ matrix.test-suite }}
        working-directory: ./tests/e2e
        run: |
          if [ "${{ matrix.test-suite }}" == "ethereum" ]; then
            pytest test_ethereum.py -v --tb=short --log-cli-level=INFO
          elif [ "${{ matrix.test-suite }}" == "solana" ]; then
            pytest test_solana.py -v --tb=short --log-cli-level=INFO
          elif [ "${{ matrix.test-suite }}" == "chaos" ]; then
            pytest test_chaos.py -v --tb=short --log-cli-level=INFO
          fi

      - name: Run full E2E suite
        if: matrix.test-suite == 'ethereum'
        working-directory: ./tests/e2e
        run: pytest test_e2e.py -v --tb=short --log-cli-level=INFO

      - name: Collect application logs
        if: failure()
        run: |
          docker compose -f infra/docker-compose.yml logs > app-logs.txt || true
          docker compose -f infra/test-docker-compose.yml logs > infra-logs.txt || true

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-artifacts-${{ matrix.test-suite }}
          path: |
            app-logs.txt
            infra-logs.txt
            tests/e2e/*.log
            tests/e2e/__pycache__
          retention-days: 7

      - name: Stop all services
        if: always()
        run: |
          docker compose -f infra/docker-compose.yml down -v || true
          docker compose -f infra/test-docker-compose.yml down -v || true

  test-e2e-full:
    name: Full E2E Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.suite == 'all' || github.event.inputs.suite == 'e2e'))
    needs: [test-integration, test-e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "tests/e2e/requirements.txt"

      - name: Install Python dependencies
        working-directory: ./tests/e2e
        run: pip install -r requirements.txt

      - name: Start full test environment
        run: |
          docker compose -f infra/test-docker-compose.yml up -d --wait
          docker compose -f infra/docker-compose.yml build
          docker compose -f infra/docker-compose.yml up -d --wait

      - name: Show all container status
        run: |
          docker compose -f infra/test-docker-compose.yml ps -a
          docker compose -f infra/docker-compose.yml ps -a

      - name: Verify all services
        run: |
          echo "Verifying Ethereum node..."
          curl -sf http://localhost:8545 -X POST -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' || exit 1
          echo "Verifying Solana node..."
          curl -sf http://localhost:8899 -X POST -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","id":1,"method":"getHealth"}' || exit 1
          echo "Verifying Rust tracker..."
          curl -sf http://localhost:8080/health || exit 1
          echo "Verifying Go API..."
          curl -sf http://localhost:3000/health || exit 1
          echo "All services ready!"

      - name: Run complete E2E test suite
        working-directory: ./tests/e2e
        run: pytest -v --tb=short --log-cli-level=INFO

      - name: Collect all logs
        if: failure()
        run: |
          docker compose -f infra/docker-compose.yml logs > full-app-logs.txt || true
          docker compose -f infra/test-docker-compose.yml logs > full-infra-logs.txt || true

      - name: Upload comprehensive artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: full-e2e-artifacts
          path: |
            full-app-logs.txt
            full-infra-logs.txt
            tests/e2e/*.log
          retention-days: 14

      - name: Cleanup
        if: always()
        run: |
          docker compose -f infra/docker-compose.yml down -v || true
          docker compose -f infra/test-docker-compose.yml down -v || true
